install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
summary(cars)
cars
plot(cars)
help(cars)
#Creating a vector
v=c("a","b","c", "f", "z")
#Picking out single element
#Indexing start at 1
v[2]
#We will create a variable to store the hello world character variabke
greeting = "Hello World"
#Typing the variable name and running will print out the varibale to the console
greeting
ages= c(28,20)
ages
integers = c(45,12,14,107,1)
#To check if the numbers are even or odd I take each of the numbers "mod" 2
even_odd= integers%2
even_odd
#3. First I will create a vector with the given integers
integers = c(45,12,14,107,1)
#To check if the numbers are even or odd I take each of the numbers "mod" 2
even_odd= integers%%2
even_odd
winning_teams = factor(c("RM", "Barca", "RM", "Atleti", "Barca"))
#Running table on this will give me the number of games each team won
table(winning_teams)
standings = data.frame(teams = c("RM", "Baraca", "Atleti", "Villa"), wins = c(2,2,1,0), losses= c(0,1,2,2), GF = c(3,7,4,6), GA = c(1,7,3, 8))
standings
M=matrix(c(1,2,3,4,5,6), nrow = 3,ncol = 3, byrow = TRUE)
M
M=matrix(c(1,2,3,4,5,6), nrow = 2,ncol = 2, byrow = TRUE)
M
"a" +3
greeting = "Hello World"
greeting
source('~/.active-rstudio-document')
greeting = "Hello World"
class(greeting)
crim tab
crimtab
predip
precip
class(precip)
Seatbelts
help("Seatbelts")
help("UKDriverDeaths")
help("Seatbelts")
class(Seatbelts)
class(Seatbelts)
df_belts = data.frame(Seatbels)
df_belts = data.frame(Seatbelts)
df_belts
sleep
head(df_belts)
df_Killed = sqldf("SELECT DriversKilled FROM df_belts")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
df_Killed = sqldf("SELECT DriversKilled FROM df_belts")
head(df_Killed)
df_Killed_Alias = sqldf("SELECT DriversKilled As Killed FROM df_belts")
head(df_Killed_Alias)
View(df_belts)
View(df_belts)
df_Killed_100 = sqldf("SELECT DriversKilled FROM df_belts WHERE DriversKilled >=100")
head(df_Killed_100)
help("Seatbelts")
df_Killed_100_1300 = sqldf("SELECT *, rear+front As rear_front FROM df_belts WHERE DriversKilled >=100 or rear_front >=1300")
head(df_Killed_100_1300)
df_Killed_100_1300 = sqldf("SELECT *, rear+front As rear_front FROM df_belts WHERE DriversKilled >=100 or rear_front >=1300")
head(df_Killed_100_1300,20)
df_Killed_100_1300
df_Killed_100_1300 = sqldf("SELECT *, rear+front As rear_front FROM df_belts WHERE DriversKilled >=100 AND rear_front >=1300")
head(df_Killed_100_1300,20)
df_avg_driven = sqldf("SELECT law, AVG(km) FROM df_belts GROUP BY law")
head(df_avg_driven)
df_avg_driven = sqldf("SELECT law, AVG(kms) FROM df_belts GROUP BY law")
head(df_avg_driven)
df_avg_driven_lowVan = sqldf("SELECT law, AVG(kms) FROM df_belts WHERE VanKilled <10 GROUP BY law")
head(df_avg_driven_lowVan)
df_avg_killed = sqldf("SELECT law, AVG(DriversKilled) FROM df_belts GROUP BY law")
head(df_avg_killed)
mtcars
str(mtcars)
colnames(mtcars)
colnames(mtcars)[1]
mtcars
class(mtcars)
help(mtcars)
colnames(mtcars)
colnames(mtcars)[1]
mtcars
help(mtcars)
class(mtcars)
str(mtcars)
mtcars
mtcars[1,1]
mtcars[3,4]
mtcars[ ,2]
mtcars[1:5,2]
mtcars$cyl
mtcars$cyl[1:5]
mtcars["cyl"][1:5]
mtcars[1:5,"cyl"]
mtcars[1:5,2:4]
mtcars
mtcars[1:5, c(2,4)]
mtcars[1:5, c("cyl", "drat")]
mtcars[1:5, c("cyl", "hp")]
mtcars[1,1] = 22
mtcars
mtcars[1,1:3] = c(23,7,161)
mtcars
mtcars
mtcars[4, c("cyl", "hp")] = c(7,115)
mtcars
mtcars
mtcars$Torque = mtcars$hp/mtcars$cyl
mtcars
mtcars
str(mtcars)
colnames(mtcars)
colnames(mtcars)[1]
colnames(mtcars)
colnames(mtcars)[8] = "Engine"
colnames(mtcars)
mtcars
mtcars$Engine = as.factor(mtcars$Engine)
str(mtcars)
levels(mtcars$Engine)
levels(mtcars$Engine) = c("V-shaped", "Straight")
mtcars
chickwts
mtcars
mtcars[order(mtcars$cyl),]
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sqldf("SELECT GREATEST(gear, carb)  FROM chickwts " )
sqldf("SELECT GREATEST(2,1) " )
sqldf("SELECT GREATEST(2,1), drv = "SQLite"" )
sqldf("SELECT GREATEST(2,1)" )
sqldf("SELECT LEAST(2,1)" )
mtcars
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sqldf("SELECT IF(hp > 200, 'Fast', 'Slow') from mtcars ")
sqldf("SELECT * from mtcars ")
sqldf("SELECT If(1=2,'true', 'false') from mtcars ")
sqldf("SELECT If(1=2,'true', 'false') AS test from mtcars ")
sqldf("SELECT CHAR_LENGTH('Hello')")
install.packages("RH2")
library("RH2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sqldf("SELECT CHAR_LENGTH('Hello')")
sqldf("SELECT If(1=2,'true', 'false') from mtcars ")
sqldf("SELECT If(1=2,'true', 'false') ")
sqldf("SELECT GREATEST(1,2,3) ")
sqldf("SELECT IF(5>6,1,2) ")
mtcars
sqldf("SELECT  GREATEST(gear, carb)  FROM mtcars  ")
sqldf("SELECT  GREATEST(gear, carb) AS 'max_gear_carb'   FROM mtcars HAVING max_gear_carb >5   ")
sqldf("SELECT  GREATEST(gear, carb) AS 'max_gear_carb'   FROM mtcars GREATEST(gear, carb)   >5   ")
sqldf("SELECT  GREATEST(gear, carb) AS 'max_gear_carb'   FROM mtcars WHERE GREATEST(gear, carb)   >5   ")
sqldf("SELECT  GREATEST(gear, carb) AS 'max_gear_carb'   FROM mtcars HAVING GREATEST(gear, carb)   >5 ")
sqldf("SELECT  GREATEST(gear, carb) AS 'max_gear_carb'   FROM mtcars")
sqldf("SELECT  GREATEST(gear, carb) AS 'max_gear_carb' FROM mtcars")
sqldf("SELECT  GREATEST(gear, carb) FROM mtcars")
sqldf("SELECT  GREATEST(gear, carb) AS a FROM mtcars")
sqldf("SELECT  GREATEST(gear, carb)   FROM mtcars HAVING GREATEST(gear, carb)   >5 ")
sqldf("SELECT  GREATEST(gear, carb)   FROM mtcars WHERE GREATEST(gear, carb)   >5 ")
sqldf("SELECT  GREATEST(gear, carb)   FROM mtcars WHERE GREATEST(gear, carb)   >2 ")
sqldf("SELECT  carb, GREATEST(gear, carb)   FROM mtcars WHERE GREATEST(gear, carb)   >2 ")
sqldf("SELECT  mpg, gear,carb, GREATEST(gear, carb)   FROM mtcars WHERE GREATEST(gear, carb)   >2 ")
sqldf("SELECT  mpg, gear,carb, GREATEST(gear, carb)   FROM mtcars WHERE GREATEST(gear, carb)   >2 ")
sqldf("SELECT hp CASE WHEN hp>=200 THEN 'Fast' ELSE 'Slow' END FROM mtcars ")
sqldf("SELECT hp CASE hp WHEN hp>=200 THEN 'Fast' ELSE 'Slow' END FROM mtcars ")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ggplot(mtcars, aes(hp,mpg)) + geom_point() + facet_wrap(~cyl)
ggplot(mtcars, aes(hp,mpg, color = cyl)) + geom_point()
Seatbelts
mtcars
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sqldf("SELECT * FROM mtcars WHERE cyl!=4")
sqldf("SELECT AVG(mpg) FROM mtcars WHERE cyl=4 GROUP BY gear, cyl")
sqldf("SELECT gear, cyl, AVG(mpg) FROM mtcars WHERE cyl=4 GROUP BY gear, cyl")
sqldf("SELECT gear, carb, AVG(mpg) FROM mtcars WHERE cyl=4 GROUP BY gear, carb")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
df = sqldf("SELECT mpg,cyl FROM mtcars")
df
class(df)
sqldf("SELECT mpg FROM df")
sqldf("SELECT * FROM mtcars")
mtcars
sqldf("SELECT * FRom mtcars WHERE carb =4")
sqldf("SELECT * FRom mtcars WHERE carb =4 AND mpg > 20")
mtcars
sqldf("SELECT AVG(mpg) FROM mtcars GROUP BY gear")
sqldf("SELECT gear,AVG(mpg) FROM mtcars GROUP BY gear")
sqldf("SELECT gear,carb, AVG(mpg) FROM mtcars GROUP BY gear, carb")
sqldf("SELECT gear,carb, AVG(mpg) FROM mtcars WHERE mpg > 16 GROUP BY gear, carb")
doc_name = c(Jon)
doctor_id = c(210,211,212,213)
doc_name = c("Jon", "Peter", "Ke", "Pat")
degree = c("MD", "MBBS", "MD", "MD")
doctors = data.frame(doctor_id, doc_name, degree)
doctors
doctor_id = c(210,214,215,212,212)
patient_name = c("Julia", "TJ", "John", "James", "Jason")
year = c(2015, 2014, 2015, 2016, 2012)
visits = data.frame(doctor_id, patient_name, year)
doctors
visits
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sqldf("SELECT * FROM visits JOIN doctors")
sqldf("SELECT * FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doctor_name, V.patient_namem V.year FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doctor_name, V.patient_name, V.year FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doc_name, V.patient_name, V.year FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doc_name, V.patient_name, V.year FROM visits V LEFT JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT  V.patient_name, V.year,D.doctor_id, D.doc_name FROM visits V LEFT JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
visits
sqldf("SELECT  V.patient_name, V.year,D.doctor_id, D.doc_name FROM visits V LEFT JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doc_name, V.patient_name, V.year FROM visits V LEFT JOIN doctors D WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doc_name, V.patient_name, V.year FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id AND year = 2015 ")
sqldf("SELECT D.doctor_id, D.doc_name, V.patient_name, V.year FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id AND GROUP BY D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doc_name, V.patient_name, V.year FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id GROUP BY D.doctor_id ")
sqldf("SELECT D.doctor_id, D.doc_name, COUNT(*) AS num_visits FROM visits V JOIN doctors D WHERE V.doctor_id = D.doctor_id GROUP BY D.doctor_id ")
sqldf("SELECT  V.patient_name, V.year, D.doc_name FROM doctors D LEFT JOIN visits V WHERE V.doctor_id = D.doctor_id ")
sqldf("SELECT a.doctor_id,a.doctor_name,
c.patient_name,c.vdate
FROM doctors a
LEFT JOIN visits c
ON a.doctor_id=c.doctor_id ")
sqldf("SELECT a.doctor_id,a.doc_name,
c.patient_name,c.vdate
FROM doctors a
LEFT JOIN visits c
ON a.doctor_id=c.doctor_id ")
#Creating the doctor df
sqldf("SELECT a.doctor_id,a.doc_name,
c.patient_name,c.year
FROM doctors a
LEFT JOIN visits c
ON a.doctor_id=c.doctor_id ")
sqldf("SELECT a.doc_name,
c.patient_name,c.year
FROM doctors a
LEFT JOIN visits c
ON a.doctor_id=c.doctor_id ")
sqldf("SELECT a.doc_name,
c.patient_name,c.year
FROM visits c
LEFT JOIN doctors a
ON a.doctor_id=c.doctor_id ")
sqldf("SELECT  D.doc_name, V.patient_name, V.year FROM doctors D LEFT JOIN visits V WHERE D.doctor_id = V.doctor_id ")
sqldf("SELECT  D.doc_name, V.patient_name, V.year FROM doctors D LEFT JOIN visits V ON D.doctor_id = V.doctor_id ")
sqldf("SELECT D.doctor_id, D.doc_name, V.patient_name, V.year FROM visits V JOIN doctors D ON V.doctor_id = D.doctor_id WHERE year = 2015 ")
sqldf("SELECT D.doctor_id, D.doc_name, COUNT(*) AS num_visits FROM visits V JOIN doctors D ON V.doctor_id = D.doctor_id GROUP BY D.doctor_id ")
sqldf("SELECT  D.doc_name, V.patient_name, V.year FROM doctors D LEFT JOIN visits V ON D.doctor_id = V.doctor_id ")
customer_id= c(1,2,3,4,5)
names = c("George", "John", "Thomas", "James", "Hillary")
state = c("VA", "MA", "VA", "VA", "VA")
zip = c(22121, 02169, 22902, 22960, 22902)
customers = data.frame(customer_id, names, state, zip)
#Orders data frame
order_id = c(1,2,3,4,5,6)
year = c(1776, 1760, 1784, 1790, 1795, 2016)
amount  = c(234.56, 78.50, 124, 65.5, 25.5, 14.4)
customer_id = c(1,3,2,3,1,5)
orders = data.frame(order_id, year, amount, customer_id)
View(orders)
View(customers)
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sqldf("SELECT C.names, O.* FROM orders O JOIN customers C ON O.customer_id = C.customer_id WHERE names = 'Thomas'")
sqldf("SELECT C.* FROM Customer C JOIN orders O ON O.customer_id = C.customer_id ")
sqldf("SELECT C.* FROM customers C JOIN orders O ON O.customer_id = C.customer_id ")
sqldf("SELECT * FROM customers C JOIN orders O  ")
order_id = c(1,2,3,4,5,6)
year = c(1776, 1760, 1784, 1790, 1795, 2016)
amount  = c(234.56, 78.50, 124, 65.5, 25.5, 14.4)
customer_id = c(1,3,2,3,5,10)
orders = data.frame(order_id, year, amount, customer_id)
sqldf("SELECT C.* FROM customers C JOIN orders O ON O.customer_id = C.customer_id ")
sqldf("SELECT * FROM customers C JOIN orders O ON O.customer_id = C.customer_id ")
sqldf("SELECT DISTINCT C.Name FROM customers C JOIN orders O ON O.customer_id = C.customer_id ")
sqldf("SELECT DISTINCT C.name FROM customers C JOIN orders O ON O.customer_id = C.customer_id ")
sqldf("SELECT DISTINCT C.names FROM customers C JOIN orders O ON O.customer_id = C.customer_id ")
sqldf("SELECT C.names, AVG(amount) FROM customers C LEFT JOIN orders O ON O.customer_id = C.customer_id GROUP BY C.names  ")
sqldf("SELECT C.names, AVG(amount) AS avg_spent FROM customers C LEFT JOIN orders O ON O.customer_id = C.customer_id GROUP BY C.names  ")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mtcars
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mtcars
sqldf("SELECT *, CASE WHEN cyl in c(6,8) AND hp <=150 THEN 'friendly' WHEN cyl=4 AND hp =100 THEN 'friendly' ELSE 'poluting' FROM mtcars ")
sqldf("SELECT *, CASE WHEN cyl in c(6,8) AND hp <=150 THEN 'friendly' WHEN cyl=4 AND hp =100 THEN 'friendly' ELSE 'poluting' END FROM mtcars ")
sqldf("SELECT *, CASE WHEN cyl=6 AND hp <=150 THEN 'friendly' WHEN cyl=4 AND hp =100 THEN 'friendly' ELSE 'poluting' END FROM mtcars ")
sqldf("SELECT *, CASE WHEN cyl in (6,8) AND hp <=150 THEN 'friendly' WHEN cyl=4 AND hp =100 THEN 'friendly' ELSE 'poluting' END FROM mtcars ")
sqldf("SELECT *, CASE WHEN cyl in (6,8) AND hp <=150 THEN 'friendly' WHEN cyl=4 AND hp =100 THEN 'friendly' ELSE 'poluting' END AS env_friendly FROM mtcars ")
sqldf("SELECT COUNT(*), CASE WHEN cyl in (6,8) AND hp <=150 THEN 'friendly' WHEN cyl=4 AND hp =100 THEN 'friendly' ELSE 'poluting' END AS env_friendly FROM mtcars GROUP BY env_friendly ")
mtcars
sqldf("SELCT * FROM mtcars WHERE CASE WHEN am=1 THEN mpg >=30 WHEN am=0 THEN mpg>=20 END")
sqldf("SELCT * FROM mtcars WHERE CASE WHEN am=1 THEN mpg >=30 WHEN am=0 THEN mpg>=20 ELSE END")
sqldf("SELECT * FROM mtcars WHERE CASE WHEN am=1 THEN mpg >=30 WHEN am=0 THEN mpg>=20 END")
sqldf("SELECT COUNT(*), CASE WHEN cyl in (6,8) AND hp <=150 THEN 'friendly' WHEN cyl=4 AND hp <=100 THEN 'friendly' ELSE 'poluting' END AS env_friendly FROM mtcars GROUP BY env_friendly ")
mtcars
sqldf("SELECT *, CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl =4 AND hp <=100 THEN 'friendly' ELSE 'polluting' END AS env_friendly FROM mtcars  ")
sqldf("SELECT *, CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl =4 AND hp <=100 THEN 'friendly' ELSE 'polluting' END AS env_friendly FROM mtcars  ")
sqldf("SELECT COUNT(*), CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl =4 AND hp <=100 THEN 'friendly' ELSE 'polluting' END AS env_friendly FROM mtcars GROUP BY env_friendly  ")
sqldf("SELECT COUNT(*) num_friendly_or_polluting, CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl =4 AND hp <=100 THEN 'friendly' ELSE 'polluting' END AS env_friendly FROM mtcars GROUP BY env_friendly  ")
sqldf("SELECT * FROM mtcars WHERE CASE am=1 THEN mpg>=30 ELSE mpg>=20 END")
sqldf("SELECT * FROM mtcars WHERE CASE am=1 THEN mpg>=30 ELSE mpg>=20 END")
sqldf("SELECT * FROM mtcars WHERE CASE WHEN am=1 THEN mpg >=30 WHEN am=0 THEN mpg>=20 END")
sqldf("SELECT * FROM mtcars WHERE CASE WHEN am=1 THEN mpg >=30 ELSE mpg>=20 END")
sqldf("SELECT * FROM mtcars WHERE CASE am=1 THEN mpg>=30 ELSE mpg>=20 END")
mtcars
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mtcars
sqldf("SELECT *, CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl=4 AND hp<=100 THEN 'friendly' ELSE 'pol' END AS env_friendly FROM mtcars")
sqldf("SELECT *, CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl=4 AND hp<=100 THEN 'friendly' ELSE 'pol' END AS env_friendly FROM mtcars")
sqldf("SELECT COUNT(*), CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl=4 AND hp<=100 THEN 'friendly' ELSE 'pol' END AS env_friendly FROM mtcars GROUP env_friendly")
sqldf("SELECT COUNT(*), CASE WHEN cyl IN (6,8) AND hp<=150 THEN 'friendly' WHEN cyl=4 AND hp<=100 THEN 'friendly' ELSE 'pol' END AS env_friendly FROM mtcars GROUP BY env_friendly")
sqldf("SELECT * FROM mtcars WHERE CASE WHEN am=1 THEN mpg>=30 ELSE mpg>=20 END")
sql = "SELECT * FROM mtcars LIMIT 2"
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
sqldf(sql)
sql
cat("Heelo",5)
rep(2,5)
print(lockers)
lockers = rep(0,100)
#Loop though each of the students
for(student in 1:100){
for(locker in lockers){
if(student%%locker==0){
if(lockers[locker]==1){
lockers[locker]=0
}else{
lockers[locker]=1
}
}
}
}
print(lockers)
source('~/Documents/Teaching/OSCM230/Fall 2016/Lectures/Lecture_18/Practice_Exercise/R_Practice9_Solutions.R')
source('~/Documents/Teaching/OSCM230/Fall 2016/Lectures/Lecture_18/Practice_Exercise/R_Practice9_Solutions.R')
lockers
find(lockers)
nnz(lockers)
which( lockers>0, arr.ind=TRUE)
which( lockers>0)
source('~/Documents/Teaching/OSCM230/Fall 2016/Lectures/Lecture_18/Practice_Exercise/R_Practice9_Solutions.R')
a= data.frame()
a
a== data.frame()
a==data.frame()
dim(a)
if(dim(a)==0){}
if(dim(a)==0){a=0}
if(dim(a)[1]==0){a=0}
dim(a)
a
a
Names =c("Jen", "Malik", "Jameis", "Greg", "Anika")
Major = c("Finance", "Accounting", "Accounting", "Finance", "Finance")
ExamScore = c(100,70,80,90,85)
Name =c("Jen", "Malik", "Jameis", "Greg", "Anika")
StudentInfo = data.frame(Name,Major,ExamScore)
StudentInfo
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
StudentInfo
sqldf("SELECT * FROM Student Info WHERE Name LIKE `%a'")
sqldf("SELECT * FROM StudentInfo WHERE Name LIKE `%a'")
sqldf("SELECT * FROM StudentInfo WHERE Name LIKE '%a'")
sqldf("SELECT AVG(ExamScore) AS avgScore FROM StudendentInfo GROUP BY Major")
sqldf("SELECT AVG(ExamScore) AS avgScore FROM StudentInfo GROUP BY Major")
sqldf("SELECT Major, AVG(ExamScore) AS avgScore FROM StudentInfo GROUP BY Major")
sqldf("SELECT AVG(ExamScore) AS avgScore FROM StudentInfo WHERE ExamScore <75 GROUP BY Major ORDER BY avgScore DESC")
sqldf("SELECT Major, AVG(ExamScore) AS avgScore FROM StudentInfo WHERE ExamScore $>75$ GROUP BY Major ORDER BY avgScore DESC")
sqldf("SELECT Major, AVG(ExamScore) AS avgScore FROM StudentInfo WHERE ExamScore >75 GROUP BY Major ORDER BY avgScore DESC")
sqldf("SELECT Name, ExamScore, CASE WHEN ExamScore >=90 THEN 'Nice' ELSE 'Lame' END FROM StudentInfo")
sqldf("SELECT Name, ExamScore, CASE WHEN ExamScore >=90 THEN 'Nice' ELSE 'Lame' END AS Label FROM StudentInfo")
Name =c("Jen", "Malik", "Jameis", "Greg")
Age = c(27,23,31,24)
College = c("Harvey Mudd", "CMC", "Harvey Mudd", "CMC")
DemInfo = data.frame(Name, Age, College)
DemInfo
StudentInfo
sqldf("SELECT A.Name, A.Major, B.College FROM   StudentInfo A LEFT JOIN DemInfo B ON A.Name = B.Name")
sqldf("SELECT A.Name, A.Major, MAX(B.ExamScore) as MaxScore FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name GROUP BY Major HAVING MaxScore >90")
sqldf("SELECT A.Name, A.Major, MAX(B.Age) as MaxAge FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name GROUP BY Major HAVING MaxAge >30")
sqldf("SELECT A.Name, A.Major, COUNT(B.ExamScore) AS COUNT_B as NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name WHERE ExamScore >85 GROUP BY Major ")
sqldf("SELECT A.Name, A.Major, COUNT(B.ExamScore) AS COUNT_B as NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name GROUP BY Major ")
sqldf("SELECT A.Name, A.Major B.College, COUNT(A.ExamScore) AS COUNT_B as NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name WHERE ExamScore >85 GROUP BY Major ")
sqldf("SELECT A.Name, A.Major B.College, COUNT(A.ExamScore) AS COUNT_B as NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name GROUP BY Major ")
sqldf("SELECT A.Name, A.Major B.College, COUNT(A.ExamScore) AS NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name GROUP BY Major ")
sqldf("SELECT A.Name, A.Major ,B.College, COUNT(A.ExamScore) AS NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name GROUP BY Major ")
sqldf("SELECT A.Name, A.Major ,B.College, COUNT(A.ExamScore) AS NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name WHERE ExamScore > 85 GROUP BY Major ")
sqldf("SELECT A.Name, A.Major ,B.College, COUNT(A.ExamScore) AS NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name WHERE ExamScore > 85 GROUP BY Major, College ")
sqldf("SELECT A.Name, A.Major ,B.College, COUNT(A.ExamScore) AS NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name WHERE ExamScore => 85 GROUP BY Major, College ")
sqldf("SELECT A.Name, A.Major ,B.College, COUNT(A.ExamScore) AS NumStudents FROM  StudentInfo A JOIN DemInfo B ON A.Name = B.Name WHERE ExamScore >= 85 GROUP BY Major, College ")
setwd("~/Documents/Teaching/Point72/Data_Science/Other_DataSets")
foodTS = read.csv("Times_Square_food_Beverage.csv")
head(foodTS)
str(foodTS)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ggplot(foodTS, aes(Subindustry)) +  geom_bar()
ggplot(foodTS, aes(Subindustry)) +  geom_bar() + facet_wrap(~Sub.Subindustry)
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)+theme(axis.text.x=element_text(angle = -90, hjust = 0))
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)+ theme(axis.text.x =element_text(angle = -90) )
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)+ theme(axis.text.x =element_text(angle = -90), hjust=0 )
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)+ theme(axis.text.x =element_text(angle = -90, hjust=0) )
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)+ theme(axis.text.x =element_text(angle = -90, hjust=5) )
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)+ theme(axis.text.x =element_text(angle = -90, hjust=1) )
ggplot(foodTS, aes(Sub.Subindustry)) +  geom_bar() + facet_wrap(~Subindustry)+ theme(axis.text.x =element_text(angle = -90, hjust=0) )
parking = read.csv("Parking_Violations_Issued_2017.csv")
levels(parking$Vehicle.Body.Type)
levels(parking$Vehicle.Make)
levels(parking$Intersecting.Street)
levels(parking$Violation.Time)
levels(parking$Unregistered.Vehicle. .Time,100)
levels(parking$Unregistered.Vehicle,100)
head(parking$Unregistered.Vehicle,100)
head(parking$Unregistered.Vehicle,1000)
head(parking$Unregistered.Vehicle,10000)
head(parking$Unregistered.Vehicle,100000)
newParking = parking[, c(parking$Registration.State, parking$Issue.Date, parking$Violation.Time, parking$Vehicle.Make)]
parking$Violation.Time
levels(parking$Violation.Time)
setwd("~/Documents/Teaching/Point72/Data_Science/FF_Assignment/Football_Data")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("gridExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ggrepel", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
#Read in the data for question 1
games = read.csv("nflgames.csv")
teams = read.csv("nflteams.csv")
nflPlayers = read.csv("nflplayers.csv")
nflPositions = read.csv("nflpositions.csv")
rushingStatsAll= read.csv("rushingstats.csv")
receivingStatsAll = read.csv("receivingstats.csv")
#Enter the player we want to analyze
player = "LeVeon Bell"
#Get this players PLayerID and TeamID
query = sprintf("SELECT PlayerID,TeamID FROM nflPlayers WHERE PlayerName = '%s'", player)
playerInfo = sqldf(query)
playerID =playerInfo[1,1]
teamID = playerInfo[1,2]
#Get the stats corresponding to this player
rushingQuery = sprintf("SELECT * FROM rushingStatsAll WHERE PlayerID = %d", playerID)
rushingStats = sqldf(rushingQuery)
receivingQuery = sprintf("SELECT * FROM receivingStatsAll WHERE PlayerID = %d", playerID)
receivingStats = sqldf(receivingQuery)
#Get the rushing and receiving stats we care about
fantasyRushing = rushingStats[,c('PlayerID','GameID', 'Yds', 'TD')]
fantasyReceiving = receivingStats[,c('PlayerID','GameID','Rec', 'RecYds', 'RecTD')]
#Join on games to get the weeks
fantasyRushingFinal = sqldf("SELECT A.*, B.Week FROM fantasyRushing A JOIN games B ON A.GameID = B.GameID ")
fantasyReceivingFinal = sqldf("SELECT A.*, B.Week FROM fantasyReceiving A JOIN games B ON A.GameID = B.GameID ")
#Get the points from rushing/receiving based on the scoring scheme given in the problem
fantasyRushingFinal$Points = fantasyRushingFinal$Yds/10.0 +fantasyRushingFinal$TD*6
fantasyReceivingFinal$Points = fantasyReceivingFinal$Rec*0.5 + fantasyReceivingFinal$RecYds/10.0 + fantasyReceivingFinal$RecTD*6
#Create the plots
rushingPlot = ggplot(fantasyRushingFinal,aes(x=Week,y=Points))  + ggtitle("Fantasy Rushing Points By Week") + geom_line()
receivingPlot = ggplot(fantasyReceivingFinal,aes(x=Week,y=Points))  + ggtitle("Fantasy Receiving Points By Week") + geom_line()
#Plot them together
grid.arrange(rushingPlot, receivingPlot)
opponentRushingQuery = sprintf("SELECT D.Week AS Week, C.TeamID AS TeamID, C.TeamCapsAbrv AS Abrv FROM teams C JOIN (SELECT B.Week, CASE WHEN B.HomeTeamID = %d THEN B.AwayTeamID WHEN B.AwayTeamID = %d THEN B.HomeTeamID END AS OpponentID FROM rushingStats A Join games B ON A.GameID = B.GameID)
D ON C.TeamID=D.OpponentID  ", teamID, teamID)
opponentRushing = sqldf(opponentRushingQuery)
opponentReceivingQuery = sprintf("SELECT D.Week AS Week, C.TeamID, C.TeamCapsAbrv AS Abrv FROM teams C JOIN (SELECT B.Week, CASE WHEN B.HomeTeamID = %d THEN B.AwayTeamID WHEN B.AwayTeamID = %d THEN B.HomeTeamID END AS OpponentID FROM receivingStats A Join games B ON A.GameID = B.GameID)
D ON C.TeamID=D.OpponentID  ", teamID, teamID)
opponentReceiving = sqldf(opponentReceivingQuery)
#Add these to the rushing and receiving stats
fantasyRushingWOpp = sqldf("SELECT A.*, B.Abrv AS OppAbrv FROM fantasyRushingFinal A JOIN opponentRushing B ON A.Week = B.Week ")
fantasyReceivingWOpp = sqldf("SELECT A.*, B.Abrv AS OppAbrv FROM fantasyReceivingFinal A JOIN opponentReceiving B ON A.Week = B.Week ")
#Create line chart with label on top of point
ggplot(fantasyRushingWOpp,aes(x = Week,y=Points, label = OppAbrv )) + scale_x_continuous(breaks = seq(min(fantasyRushingWOpp$Week), max(fantasyRushingWOpp$Week), by = 1)) +  ggtitle("Fantasy Rushing Points By Week") + geom_text_repel(size=4) + geom_line()
#Create a slightly prettier version of this
ggplot(fantasyRushingWOpp,aes(x = Week,y=Points)) + scale_x_continuous(breaks = seq(min(fantasyRushingWOpp$Week), max(fantasyRushingWOpp$Week), by = 1)) +  ggtitle("Fantasy Rushing Points By Week") + geom_label_repel(aes(label = OppAbrv) ,size=4) + geom_line()
gamesOpponents= sqldf("SELECT A.TeamID AS teamID, A.Abrv AS teamAbrv, CASE WHEN A.TeamID = B.HomeTeamID THEN B.AwayTeamID WHEN A.TeamID = B.AwayTeamID THEN B.HomeTeamID END AS oppID, B.GameID AS GameID
FROM opponentRushing A JOIN games B ON (A.TeamID = B.HomeTeamID OR A.TeamID =B.AwayTeamID)")
#Get the points from rushing based on the scoring scheme given in the problem
rushingStatsAll$Points = rushingStatsAll$Yds/10.0 +rushingStatsAll$TD*6
#Filter the rushing stats by RB
rushingStatsRB = sqldf("SELECT * from rushingStatsAll WHERE PositionID=2")
#Get the points by RBS in each Game
fantasyPointsRBS = sqldf("SELECT GameID, TeamID, SUM(Points) AS TotalPoints FROM rushingStatsRB GROUP BY GameID, TeamID ")
#Get the running pack points for each of the opponents
pointsRBOpp = sqldf("SELECT A.*, B.TotalPoints FROM gamesOpponents A JOIN fantasyPointsRBS B ON (A.oppID = B.TeamID AND A.GameID =B.GameID )")
#Aggregate by team
AggPointsRBOpp = sqldf("SELECT teamAbrv, AVG(TotalPoints) AS AvgPoint, STDEV(TotalPoints) AS Stdev FROM pointsRBOpp GROUP BY teamAbrv  ")
#Add this to the players stats week by week
finalFantasyPoints = sqldf("SELECT A.*,B.AvgPoint AS AvgOppPoints, B.Stdev AS StdevOppPoints FROM fantasyRushingWOpp A JOIN AggPointsRBOpp B ON A.OppAbrv = B.teamAbrv   ")
#Remake the plots with the opponent info
ggplot(finalFantasyPoints) + scale_x_continuous(breaks = seq(min(finalFantasyPoints$Week), max(fantasyRushingWOpp$Week), by = 1)) +  ggtitle("Fantasy Rushing Points By Week") + geom_line(aes(x = Week,y=Points)) +
geom_point(aes(x = Week,y=AvgOppPoints),size=3, shape=21, fill="blue") + geom_errorbar(aes(x=Week,ymin=AvgOppPoints-StdevOppPoints, ymax=AvgOppPoints+StdevOppPoints), colour="red", width=.1) + geom_label(aes(x= Week, y =AvgOppPoints+StdevOppPoints, label = OppAbrv), vjust=-0.3 ,size=4)
mtcar[,c(mtcars$mpg)]
mtcar[,c('mpg')]
mtcar[,c("mpg")]
colnames(mtcars)
mtcar[,c("mpg", "cyl")]
mtcar[1,c("mpg", "cyl")]
mtcars[1,c("mpg", "cyl")]
mtcars[,c("mpg", "cyl")]
mtcars[,c(mtcars$mpg)]
head(parking)
newParking = parking[, c("Registration.State", "Issue.Date", "Violation.Time", "Vehicle.Make")]
head(newParking)
write.csv(newParking, "parking.csv")
getwd()
str(newParking)
